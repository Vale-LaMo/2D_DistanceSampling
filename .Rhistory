data.frame(component, CV)
dens_groups_km2
summary.dsmodel()
summary.dsmodel
summary.dsmodel
summary.ds
summaru.lm()
summay.lm()
summary.lm()
summary.lm
## A simple class with two slots
track <- setClass("track", slots = c(x="numeric", y="numeric"))
## an object from the class
t1 <- track(x = 1:10, y = 1:10 + rnorm(10))
t1
View(data_trunc)
fitVU
tabVU
summary(fitVU)
names(fitVU)
fitVU$par
data_trunc$forw_dist
data_trunc$perp_dist
print(paste("AIC",":",fitVU$AIC, sep="\t"))
print(paste("AIC",":",fitVU$AIC, sep="t"))
print(paste("AIC",":",fitVU$AIC, sep=":\t"))
paste("AIC",":",fitVU$AIC, sep=":\t"))
paste("AIC",":",fitVU$AIC, sep=":\t")
paste("AIC",":",fitVU$AIC, sep="\t")
cat("AIC",":",fitVU$AIC, sep="\t")
cat("Distance range",":",max(data_trunc$perp_dist), sep="\t")
cat("Distance range",":", paste(min(data_trunc$perp_dist),"-",max(data_trunc$perp_dist),sep = " "), sep="\t")
cat("Distance range",":", paste("0 - ",max(data_trunc$perp_dist),sep = ""), sep="\t")
View(data_trunc)
cat("Number of oservations",":",dim(data_trunc)[1], sep="\t")
cat("Number of oservations",":",dim(data_trunc)[1], sep="\t")
cat("Perpendicular distance range",":", paste(min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),sep = ""), sep="\t")
cat("Forward distance range",":", paste(min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),sep = ""), sep="\t")
cat("Number of oservations",":",dim(data_trunc)[1], sep="\t")
cat("Perpendicular distance range",":", paste(min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),sep = ""), sep="\t")
cat("Forward distance range",":", paste(min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),sep = ""), sep="\t")
cat("Model",":",fName, sep="\t"))
fName
cat("Model",":",fName[1], sep="\t"))
cat("Number of oservations",":",dim(data_trunc)[1], sep="\t")
cat("Perpendicular distance range",":", paste(min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),sep = ""), sep="\t")
cat("Forward distance range",":", paste(min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),sep = ""), sep="\t")
cat("Model",":",fName[1], sep="\t")
cat("AIC",":",fitVU$AIC, sep="\t")
cat("Number of oservations",":",dim(data_trunc)[1],"\n",
"Perpendicular distance range",":", paste(min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),sep = ""), sep="\t")
cat("Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"Perpendicular distance range",":", paste(min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),sep = ""))
cat("Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"Perpendicular distance range","\t",":","\t", paste(min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),sep = ""))
cat("Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n","Perpendicular distance range","\t",":","\t", paste(min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),sep = ""))
cat("Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"Perpendicular distance range","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist)))
cat("Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"Perpendicular distance range","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist)))
cat("Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"Perpendicular distance range","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist))
cat("Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"Perpendicular distance range","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist)"\n",
cat("Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"Perpendicular distance range","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist))
cat("\t","Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"Perpendicular distance range","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist))
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"Perpendicular distance range","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist))
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"\n",
"Perpendicular distance range","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist))
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"\n",
"Perpendicular distance range","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),
"\n",
"Model",":",fName[1],"\n",
"AIC",":",fitVU$AIC"\n",
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"\n",
"Perpendicular distance range","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),
"\n",
"Model",":",fName[1],"\n",
"AIC",":",fitVU$AIC,"\n",
"\n",
"\n"
)
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"\n",
"Perpendicular distance range","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),"\n",
"\n",
"Model",":",fName[1],"\n",
"AIC",":",fitVU$AIC,"\n",
"\n",
"\n"
)
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"\n",
"Perpendicular distance range","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),"\n",
"\n",
"Model","\t",":","\t",fName[1],"\n",
"AIC","\t",":","\t",fitVU$AIC,"\n",
"\n",
"\n"
)
tabVU
tabVU
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"\n",
"Perpendicular distance range","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),"\n",
"\n",
"Model","\t",":","\t",fName[1],"\n",
"AIC","\t",":","\t",fitVU$AIC,"\n",
"\n",
tabVU,
"\n"
)
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"\n",
"Perpendicular distance range","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),"\n",
"\n",
"Model","\t",":","\t",fName[1],"\n",
"AIC","\t",":","\t",fitVU$AIC,"\n",
"\n",
print(tabVU),
"\n"
)
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"\n",
"Perpendicular distance range","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),"\n",
"\n",
"Model","\t",":","\t",fName[1],"\n",
"AIC","\t",":","\t",fitVU$AIC,"\n")
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"\n",
"Perpendicular distance range","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),"\n",
"\n",
"Model","\t",":","\t",fName[1],"\n",
"AIC","\t",":","\t",fitVU$AIC,"\n")
tabVU
print(tabVU)
no_groups
data$cluster_size
LT2D::phatModels(modList = FIT[1], n=length(na.omit(data$cluster_size)))
na.omit(data$cluster_size)
FIT
LT2D::phatModels(modList = FIT[1], n=length(na.omit(data_trunc$cluster_size)))
(length(na.omit(data_trunc$cluster_size))/(phatInterval(fitVU))[1]
length(na.omit(data_trunc$cluster_size))/(phatInterval(fitVU))[1] -> no_groups
length(na.omit(data_trunc$cluster_size))
length(na.omit(data_trunc$cluster_size))/(phatInterval(fitVU))[1] -> no_groups
no_groups
no_groups
length(na.omit(data_trunc$cluster_size))/(phatInterval(fitVU))[1] -> no_groups
names(no_groups) <- "no_groups"
data %>%
mutate(transetto = factor(transect)) %>%
dplyr::group_by(transetto) %>%
dplyr::summarise(no_groups_transect = sum(detected),
transect_length = mean(transect_length)) %>%
mutate(encounter_rate = no_groups_transect/transect_length) -> res
# res
(2*(w/1000)*sum(res$transect_length)) -> surveyed_area # here, the truncation distance is divided by 1000, to express the density in km2
(no_groups/surveyed_area) -> dens_groups_km2
names(dens_groups_km2) <- "dens_groups_km2"
cbind(no_groups, dens_groups_km2)
(LT2D::phatModels(modList = FIT[1], n=length(na.omit(data_trunc$cluster_size))) -> stats_df_groups)
stats_df_groups
FIT[1]
(LT2D::phatModels(modList = fitVU, n=length(na.omit(data_trunc$cluster_size))) -> stats_df_groups)
(LT2D::phatModels(modList = FIT[1], n=length(na.omit(data_trunc$cluster_size))) -> stats_df_groups)
print(stats_df_groups)
tabVU
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"\n",
"Perpendicular distance range","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),"\n",
"\n",
"Model","\t",":","\t",fName[1],"\n",
"AIC","\t",":","\t",fitVU$AIC,"\n")
rows = c("Average p", "N groups in covered region")
Estimate = c(stats_df_groups$phat, Nhat)
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"\n",
"Perpendicular distance range","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),"\n",
"\n",
"Model","\t",":","\t",fName[1],"\n",
"AIC","\t",":","\t",fitVU$AIC,"\n")
rows = c("Average p", "N groups in covered region")
Estimate = c(stats_df_groups$phat, stats_df_groups$Nhat)
Lower = c(stats_df_groups$lower.bound, stats_df_groups$NhatLower)
Upper = c(stats_df_groups$upper.bound, stats_df_groups$NhatUpper)
data.frame(rows,Estimate,Lower,Upper)
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"\n",
"Perpendicular distance range (m)","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range (m)","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),"\n",
"\n",
"Model","\t",":","\t",fName[1],"\n",
"AIC","\t",":","\t",fitVU$AIC,"\n",
"\n",
"No. transects","\t",":","\t",dim(res)[1],"\n",
"Effort (km)","\t",":","\t",sum(res$transect_length))
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"\n",
"Perpendicular distance range (m)","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range (m)","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),"\n",
"\n",
"Model","\t",":","\t",fName[1],"\n",
"AIC","\t",":","\t",fitVU$AIC,"\n",
"\n",
"No. transects","\t",":","\t",dim(res)[1],"\n",
"Effort (km)","\t",":","\t",sum(res$transect_length),"\n",
"Surveyed area (km2)","\t",":","\t",surveyed_area)
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"\n",
"Perpendicular distance range (m)","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range (m)","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),"\n",
"\n",
"Model","\t",":","\t",fName[1],"\n",
"AIC","\t",":","\t",fitVU$AIC,"\n",
"\n",
"No. transects","\t",":","\t",dim(res)[1],"\n",
"Effort (km)","\t",":","\t",sum(res$transect_length),"\n",
"\n",
"Surveyed area (km2)","\t",":","\t",surveyed_area)
data.frame(rows,Estimate,Lower,Upper)
no_groups
abund_survey_individuals
surveyed_area
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"\n",
"Perpendicular distance range (m)","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range (m)","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),"\n",
"\n",
"Model","\t",":","\t",fName[1],"\n",
"AIC","\t",":","\t",fitVU$AIC,"\n",
"\n",
"No. transects","\t",":","\t",dim(res)[1],"\n",
"Effort (km)","\t",":","\t",sum(res$transect_length),"\n",
"\n",
"Surveyed area (km2)","\t",":","\t",surveyed_area)
rows = c("Average p", "N groups", "N individuals")
Estimate = c(stats_df_groups$phat, stats_df_groups$Nhat, abund_survey_individuals[1])
Lower = c(stats_df_groups$lower.bound, stats_df_groups$NhatLower, stats_df_groups$NhatLower*mean(data_clustersize$cluster_size))
Upper = c(stats_df_groups$upper.bound, stats_df_groups$NhatUpper, stats_df_groups$NhatUpper*mean(data_clustersize$cluster_size))
data.frame(rows,Estimate,Lower,Upper)
stats_df_groups$NhatUpper
stats_df_groups$NhatLower
stats_df_groups$NhatUpper
stats_df_groups$NhatLower*mean(data_clustersize$cluster_size)
stats_df_groups$NhatUpper*mean(data_clustersize$cluster_size)
mean(data_clustersize$cluster_size)
no_groups
no_groups*6.47
no_groups*mean(data_clustersize$cluster_size) -> abund_survey_individuals # estimated abundance, individuals
abund_survey_individuals
Estimate = c(stats_df_groups$phat, stats_df_groups$Nhat, abund_survey_individuals[1])
Lower = c(stats_df_groups$lower.bound, stats_df_groups$NhatLower, stats_df_groups$NhatLower*mean(data_clustersize$cluster_size))
Upper = c(stats_df_groups$upper.bound, stats_df_groups$NhatUpper, stats_df_groups$NhatUpper*mean(data_clustersize$cluster_size))
data.frame(rows,Estimate,Lower,Upper)
rows = c("Average p", "N groups", "N individuals")
Estimate = c(stats_df_groups$phat, stats_df_groups$Nhat, abund_survey_individuals[1])
Lower = c(stats_df_groups$lower.bound, stats_df_groups$NhatLower, stats_df_groups$NhatLower*mean(data_clustersize$cluster_size))
Upper = c(stats_df_groups$upper.bound, stats_df_groups$NhatUpper, stats_df_groups$NhatUpper*mean(data_clustersize$cluster_size))
data.frame(rows,Estimate,Lower,Upper)
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"\n",
"Perpendicular distance range (m)","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range (m)","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),"\n",
"\n",
"Model","\t",":","\t",fName[1],"\n",
"AIC","\t",":","\t",fitVU$AIC,"\n",
"\n",
"No. transects","\t",":","\t",dim(res)[1],"\n",
"Effort (km)","\t",":","\t",sum(res$transect_length),"\n",
"\n",
"Surveyed area (km2)","\t",":","\t",surveyed_area)
stats_df_groups$NhatLower*mean(data_clustersize$cluster_size) -> ind_min
stats_df_groups$NhatUpper*mean(data_clustersize$cluster_size) -> ind_max
rows = c("Average p", "N groups", "N individuals")
Estimate = c(stats_df_groups$phat, stats_df_groups$Nhat, abund_survey_individuals[1])
Lower = c(stats_df_groups$lower.bound, stats_df_groups$NhatLower, ind_min)
Upper = c(stats_df_groups$upper.bound, stats_df_groups$NhatUpper, ind_max)
data.frame(rows,Estimate,Lower,Upper)
cbind(rows,Estimate,Lower,Upper)
abund_survey_individuals[1]
Estimate = c(stats_df_groups$phat, stats_df_groups$Nhat, abund_survey_individuals[[1]])
Lower = c(stats_df_groups$lower.bound, stats_df_groups$NhatLower, ind_min)
Upper = c(stats_df_groups$upper.bound, stats_df_groups$NhatUpper, ind_max)
cbind(rows,Estimate,Lower,Upper)
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"\n",
"Perpendicular distance range (m)","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range (m)","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),"\n",
"\n",
"Model","\t",":","\t",fName[1],"\n",
"AIC","\t",":","\t",fitVU$AIC,"\n",
"\n",
"No. transects","\t",":","\t",dim(res)[1],"\n",
"Effort (km)","\t",":","\t",sum(res$transect_length),"\n",
"\n",
"Surveyed area (km2)","\t",":","\t",surveyed_area)
stats_df_groups$NhatLower*mean(data_clustersize$cluster_size) -> ind_min
stats_df_groups$NhatUpper*mean(data_clustersize$cluster_size) -> ind_max
rows = c("Average p", "N groups", "N individuals")
Estimate = c(stats_df_groups$phat, stats_df_groups$Nhat, abund_survey_individuals[[1]])
Lower = c(stats_df_groups$lower.bound, stats_df_groups$NhatLower, ind_min)
Upper = c(stats_df_groups$upper.bound, stats_df_groups$NhatUpper, ind_max)
cbind(rows,Estimate,Lower,Upper)
data.frame(rows,Estimate,Lower,Upper)
#### Load packages
library(tidyverse)
library(readxl)
library(mvtnorm)
# if(!"devtools" %in% rownames(installed.packages()))
#   {install.packages("devtools")}
# devtools::install_github('david-borchers/LT2D')
library(LT2D)
#### Load 2D distance functions
source("functions/com_hfunctions.R")
source("functions/com_pifunctions.R")
source("functions/com_likelihoodutilities.R")
source("functions/GoFy_vlm.R") # custom GoFy function, modified by VLM 2022-11-11
source("functions/plotfit.x.red.R") # custom function, modified by VLM 2023-08-31, to have a red line instead of a grey one
#### Load dataset
data <- read_excel(paste("data/",params$input_file,sep=""), #sheet="template_dataset",
col_types = c(rep("numeric", 8),
"date",
"text", "text"))
# data$transect_length <- data$transect_length*1000
# data$area <- data$area*1000000
head(data)
#### Dealing with NA and non-detections
data_clean <-
data %>%
filter(detected != 0, # we only include actual observations in the dataset used to fit the detection function
perp_dist != "NA", # we remove lines with NA distances
forw_dist != "NA")
data_clean$forw_dist <- abs(data_clean$forw_dist) # we make sure all distances are positive (see Discussion for details)
hist(data_clean$perp_dist, main = "", xlab = "Perpendicular distance (m)")
boxplot(data_clean$perp_dist, ylab = "Perpendicular distance (m)")
no_data <- round(params$trunc_perp_dist*length(data_clean$perp_dist)/100,0) # no. data to be deleted
threshold <- sort(data_clean$perp_dist, decreasing = TRUE)[no_data+1] # threshold
data_trunc <-
data_clean %>%
filter(perp_dist <= threshold)
save(data_trunc, file = paste("output/data_trunc_", params$species_name,".RData", sep = ""), compress = FALSE)
hist(data_trunc$forw_dist, main = "", xlab = "Forward distance (m)")
boxplot(data_trunc$forw_dist, ylab = "Forward distance (m)")
# ystart = max(data_trunc$forw_dist) # change this to the desired truncation distance if necessary, e.g.
ystart = 150
data_trunc <-
data_trunc %>%
filter(forw_dist <= ystart)
seed_no <- set.seed(params$seed_no)
#### Model fitting
y = data_trunc$forw_dist
x = data_trunc$perp_dist
hr = h.RE # h.yTRE not compatible with pi.sigmoI
# these functions work: h.RE, h.IP, h.SS, h.okamura
pi.x = pi.sigmo
# functions tested and working with h.RE: pi.sigmo, pi.CHN, pi.TN
ystart = ceiling(max(y))
w = ceiling(max(x))
length.b = 2
debug=FALSE
FIT=list(); dev=NULL
for (m in 1:10) {
set.seed(params$seed_no)
pars = rnorm(4, c(0.25,0.25,-4,-1), 3)
set.seed(params$seed_no)
tmp0 <- tryCatch.W.E (
fityx(y,x,pars[1:length.b],
hr,ystart,pi.x,pars[(length.b+1):length(pars)],w,control=list(),
hessian=TRUE,corrFlag=0.7,debug=FALSE)
)
fit = NA
if(! "error" %in% class(tmp0$value)) {
fit <- tmp0$value
fit$vcov <-  matrix(Matrix::nearPD(fit$vcov)$mat,4,4)
}
FIT[[m]] = fit
if(is.na(fit[1])) dev=c(dev, 1e12) else dev = c(dev, fit$val)
}
fitVU = FIT[[which.min(dev)]]
tabVU = matrix(NA,2,3)
if(is.na(fitVU[1])) tabVU = matrix(NA,2,3) else {
# set.seed(10)
tmp1 <- tryCatch.W.E (boot(fitVU))
if(! "error" %in% class(tmp1$value))  tabVU=tmp1$value
}
# tabVU
if(!is.numeric(unlist(tabVU))) print("error, change seed_no to any random number")
save(fitVU, file = paste("output/fitVU_", params$species_name, ".RData", sep = ""), compress = FALSE)
tryCatch.W.E(plotfit.x.red(x[x<=w],fitVU,nclass=20,nint=100));rug(x[x<=w])
# see https://github.com/david-borchers/LT2D/blob/master/inst/FitsForPaper.r
# the original plotfit.x function has been modified to customize the colors
fName = "h1"
GoFx(fitVU,plot=TRUE)$pvals
plotfit.y(y[x<=w & y<=ystart],x,fitVU,nclass=20);rug(x=y[x<=w])
plotfit.smoothfy(fitVU,nclass=32);rug(x=y[x<=w])
GoFy_vlm(fitVU,plot=TRUE)$pvals
plotfit.smoothfy(fitVU,xmax=199)
(LT2D::phatModels(modList = FIT[1], n=length(na.omit(data_trunc$cluster_size))) -> stats_df_groups)
length(na.omit(data_trunc$cluster_size))/(phatInterval(fitVU))[1] -> no_groups
names(no_groups) <- "no_groups"
data %>%
mutate(transetto = factor(transect)) %>%
dplyr::group_by(transetto) %>%
dplyr::summarise(no_groups_transect = sum(detected),
transect_length = mean(transect_length)) %>%
mutate(encounter_rate = no_groups_transect/transect_length) -> res
# res
(2*(w/1000)*sum(res$transect_length)) -> surveyed_area # here, the truncation distance is divided by 1000, to express the density in km2
(no_groups/surveyed_area) -> dens_groups_km2
names(dens_groups_km2) <- "dens_groups_km2"
cbind(no_groups, dens_groups_km2)
data_clustersize <-
data %>%
filter(detected != 0,
perp_dist != "NA",
forw_dist != "NA",
perp_dist <= w,
forw_dist <= ystart)
data_clustersize$forw_dist <- abs(data_clustersize$forw_dist)
print("Cluster size base stats:")
summary(data_clustersize$cluster_size)
print("Cluster size standard deviation:")
sd(data_clustersize$cluster_size)
no_groups*mean(data_clustersize$cluster_size) -> abund_survey_individuals # estimated abundance, individuals
names(abund_survey_individuals) <- "no_individuals"
cv_encounterrate <- (sd(res$encounter_rate)/mean(res$encounter_rate))
cv_detfunc <- (phatInterval(fitVU)[2])
cv_clustersize <- (sd(data_clustersize$cluster_size)/mean(data_clustersize$cluster_size))
cv_tot <- sqrt(cv_detfunc^2 + cv_clustersize^2 + cv_encounterrate^2)
component = c("Encounter rate", "Cluster size", "Detection function", "Abundance")
CV = c(cv_encounterrate, cv_clustersize, cv_detfunc[[1]], cv_tot[[1]])
data.frame(component, CV)
abund_survey_individuals[1]/surveyed_area -> dens_ind_km2 # individui
names(dens_ind_km2) <- "no_ind_km2"
cbind(dens_groups_km2, dens_ind_km2)
cbind(no_groups, dens_groups_km2)
cat(" Number of oservations","\t",":","\t",dim(data_trunc)[1],"\n",
"\n",
"Perpendicular distance range (m)","\t",":","\t",min(data_trunc$perp_dist)," - ",max(data_trunc$perp_dist),"\n",
"Forward distance range (m)","\t",":","\t", min(data_trunc$forw_dist)," - ",max(data_trunc$forw_dist),"\n",
"\n",
"Model","\t",":","\t",fName[1],"\n",
"AIC","\t",":","\t",fitVU$AIC,"\n",
"\n",
"No. transects","\t",":","\t",dim(res)[1],"\n",
"Effort (km)","\t",":","\t",sum(res$transect_length),"\n",
"\n",
"Surveyed area (km2)","\t",":","\t",surveyed_area)
stats_df_groups$NhatLower*mean(data_clustersize$cluster_size) -> ind_min
stats_df_groups$NhatUpper*mean(data_clustersize$cluster_size) -> ind_max
rows = c("Average p", "N groups", "N individuals")
Estimate = c(stats_df_groups$phat, stats_df_groups$Nhat, abund_survey_individuals[[1]])
Lower = c(stats_df_groups$lower.bound, stats_df_groups$NhatLower, ind_min)
Upper = c(stats_df_groups$upper.bound, stats_df_groups$NhatUpper, ind_max)
data.frame(rows,Estimate,Lower,Upper)
abund_survey_individuals/surveyed_area
no_groups*mean(data_clustersize$cluster_size) -> abund_survey_individuals # estimated abundance, individuals
names(abund_survey_individuals) <- "no_individuals"
abund_survey_individuals/surveyed_area
cv_encounterrate <- (sd(res$encounter_rate)/mean(res$encounter_rate))
cv_detfunc <- (phatInterval(fitVU)[2])
cv_clustersize <- (sd(data_clustersize$cluster_size)/mean(data_clustersize$cluster_size))
cv_tot <- sqrt(cv_detfunc^2 + cv_clustersize^2 + cv_encounterrate^2)
component = c("Encounter rate", "Cluster size", "Detection function", "Abundance")
CV = c(cv_encounterrate, cv_clustersize, cv_detfunc[[1]], cv_tot[[1]])
data.frame(component, CV)
abund_survey_individuals
cbind(abund_survey_individuals,abund_survey_individuals/surveyed_area)
no_groups*mean(data_clustersize$cluster_size) -> abund_survey_individuals # estimated abundance, individuals
cbind(abund_survey_individuals,abund_survey_individuals/surveyed_area)
names(abund_survey_individuals) <- c("no_individuals","dens_individuals_km2")
data.frame(abund_survey_individuals,abund_survey_individuals/surveyed_area)
names(abund_survey_individuals) <- c("no_individuals","dens_individuals_km2")
data.frame(abund_survey_individuals[1],abund_survey_individuals/surveyed_area)
names(abund_survey_individuals) <- c("no_individuals","dens_individuals_km2")
data.frame(abund_survey_individuals[1],abund_survey_individuals/surveyed_area)
no_groups*mean(data_clustersize$cluster_size) -> abund_survey_individuals # estimated abundance, individuals
data.frame(abund_survey_individuals[1],abund_survey_individuals/surveyed_area) -> df
names(df) <- c("no_individuals","dens_individuals_km2")
df
no_groups*mean(data_clustersize$cluster_size) -> abund_survey_individuals # estimated abundance, individuals
data.frame(abund_survey_individuals[1],abund_survey_individuals/surveyed_area) -> df
names(df) <- c("no_individuals","dens_individuals_km2")
df
cv_encounterrate <- (sd(res$encounter_rate)/mean(res$encounter_rate))
cv_detfunc <- (phatInterval(fitVU)[2])
cv_clustersize <- (sd(data_clustersize$cluster_size)/mean(data_clustersize$cluster_size))
cv_tot <- sqrt(cv_detfunc^2 + cv_clustersize^2 + cv_encounterrate^2)
component = c("Encounter rate", "Cluster size", "Detection function", "Abundance")
CV = c(cv_encounterrate, cv_clustersize, cv_detfunc[[1]], cv_tot[[1]])
data.frame(component, CV)
