tag_suffix = ')')
dev.off()
####---- Load packages ----
library(tidyverse)
library(readxl)
library(mvtnorm)
# if(!"devtools" %in% rownames(installed.packages()))
#   {install.packages("devtools")}
# devtools::install_github('david-borchers/LT2D')
library(LT2D)
library(Distance)
library(hrbrthemes)
library(Rmisc)
data_summary <- function(data, varname, groupnames){
# require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE),
lcl = CI(x[[col]])[[3]],
ucl = CI(x[[col]])[[1]])
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
load("output/simula/duikersimula_9_7_2024_cvs.RData") # dati di base dei cv
do.call("rbind",cvs) -> cvs_simula
logo_path <- paste("logos/duiker_logo.png",sep = "")
logo <- readPNG(logo_path)
library(plyr)
cvs_simula %>%
filter(CV.phat < 0.9) -> cvs_simula_clean
cvs_simula_grouped <- data_summary(cvs_simula_clean, varname="CV.phat",
groupnames=c("sample_size"))
# Convert dose to a factor variable
cvs_simula_grouped$sample_size = as.factor(cvs_simula_grouped$sample_size)
ggplot(cvs_simula, aes(x = as.factor(sample_size), y = CV.phat)) +
geom_boxplot() +
geom_hline(yintercept=0.2, linetype="dashed", color = "red") +
scale_x_discrete(expand=c(-1.1,0)) +
scale_y_continuous(expand=c(0,0), limits=c(-0.05, 1)) +
xlab("") +
ylab("CV") +
# theme(axis.text.y=element_blank()) +
# labs(
#   # title="IBM Plex Sans Test",
#   subtitle=species.name,
#   # caption="Source: hrbrthemes & IBM"
# ) +
theme_classic(base_size = 10) +
guides(x = "axis_truncated", y = "axis_truncated") +
annotation_custom(rasterGrob(logo, width = unit(2, "cm"),
height = unit(2, "cm")),
xmin=5, ymin=0.75) -> p_simula_duiker
library(grid.raster)
library(grid)
ggplot(cvs_simula, aes(x = as.factor(sample_size), y = CV.phat)) +
geom_boxplot() +
geom_hline(yintercept=0.2, linetype="dashed", color = "red") +
scale_x_discrete(expand=c(-1.1,0)) +
scale_y_continuous(expand=c(0,0), limits=c(-0.05, 1)) +
xlab("") +
ylab("CV") +
# theme(axis.text.y=element_blank()) +
# labs(
#   # title="IBM Plex Sans Test",
#   subtitle=species.name,
#   # caption="Source: hrbrthemes & IBM"
# ) +
theme_classic(base_size = 10) +
guides(x = "axis_truncated", y = "axis_truncated") +
annotation_custom(rasterGrob(logo, width = unit(2, "cm"),
height = unit(2, "cm")),
xmin=5, ymin=0.75) -> p_simula_duiker
logo_path <- paste("logos/duiker_logo.png",sep = "")
logo <- readPNG(logo_path)
library(png)
library(png)
logo <- readPNG(logo_path)
cvs_simula %>%
filter(CV.phat < 0.9) -> cvs_simula_clean
cvs_simula_grouped <- data_summary(cvs_simula_clean, varname="CV.phat",
groupnames=c("sample_size"))
# Convert dose to a factor variable
cvs_simula_grouped$sample_size = as.factor(cvs_simula_grouped$sample_size)
ggplot(cvs_simula, aes(x = as.factor(sample_size), y = CV.phat)) +
geom_boxplot() +
geom_hline(yintercept=0.2, linetype="dashed", color = "red") +
scale_x_discrete(expand=c(-1.1,0)) +
scale_y_continuous(expand=c(0,0), limits=c(-0.05, 1)) +
xlab("") +
ylab("CV") +
# theme(axis.text.y=element_blank()) +
# labs(
#   # title="IBM Plex Sans Test",
#   subtitle=species.name,
#   # caption="Source: hrbrthemes & IBM"
# ) +
theme_classic(base_size = 10) +
guides(x = "axis_truncated", y = "axis_truncated") +
annotation_custom(rasterGrob(logo, width = unit(2, "cm"),
height = unit(2, "cm")),
xmin=5, ymin=0.75) -> p_simula_duiker
p_simula_duiker
library(ggh4x)
data_summary <- function(data, varname, groupnames){
# require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE),
lcl = CI(x[[col]])[[3]],
ucl = CI(x[[col]])[[1]])
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
load("output/simula/duikersimula_9_7_2024_cvs.RData") # dati di base dei cv
do.call("rbind",cvs) -> cvs_simula
logo_path <- paste("logos/duiker_logo.png",sep = "")
logo <- readPNG(logo_path)
library(plyr)
cvs_simula %>%
filter(CV.phat < 0.9) -> cvs_simula_clean
cvs_simula_grouped <- data_summary(cvs_simula_clean, varname="CV.phat",
groupnames=c("sample_size"))
# Convert dose to a factor variable
cvs_simula_grouped$sample_size = as.factor(cvs_simula_grouped$sample_size)
ggplot(cvs_simula, aes(x = as.factor(sample_size), y = CV.phat)) +
geom_boxplot() +
geom_hline(yintercept=0.2, linetype="dashed", color = "red") +
scale_x_discrete(expand=c(-1.1,0)) +
scale_y_continuous(expand=c(0,0), limits=c(-0.05, 1)) +
xlab("") +
ylab("CV") +
# theme(axis.text.y=element_blank()) +
# labs(
#   # title="IBM Plex Sans Test",
#   subtitle=species.name,
#   # caption="Source: hrbrthemes & IBM"
# ) +
theme_classic(base_size = 10) +
guides(x = "axis_truncated", y = "axis_truncated") +
annotation_custom(rasterGrob(logo, width = unit(2, "cm"),
height = unit(2, "cm")),
xmin=5, ymin=0.75) -> p_simula_duiker
p_simula_duiker
load("output/simula/impalasimula_31_7_2024_cvs.RData") # dati di base dei cv
do.call("rbind",cvs) -> cvs_simula
logo_path <- paste("logos/impala_logo.png",sep = "")
logo <- readPNG(logo_path)
library(plyr)
cvs_simula %>%
filter(CV.phat < 0.9) -> cvs_simula_clean
cvs_simula_grouped <- data_summary(cvs_simula_clean, varname="CV.phat",
groupnames=c("sample_size"))
# Convert dose to a factor variable
cvs_simula_grouped$sample_size = as.factor(cvs_simula_grouped$sample_size)
ggplot(cvs_simula, aes(x = as.factor(sample_size), y = CV.phat)) +
geom_boxplot() +
geom_hline(yintercept=0.2, linetype="dashed", color = "red") +
scale_x_discrete(expand=c(-1.1,0)) +
scale_y_continuous(expand=c(0,0), limits=c(-0.05, 0.5)) +
xlab("Sample size") +
ylab("CV") +
# theme(axis.text.y=element_blank()) +
# labs(
#   # title="IBM Plex Sans Test",
#   subtitle=species.name,
#   # caption="Source: hrbrthemes & IBM"
# ) +
theme_classic(base_size = 10) +
guides(x = "axis_truncated", y = "axis_truncated") +
annotation_custom(rasterGrob(logo, width = unit(2, "cm"),
height = unit(2, "cm")),
xmin=5, ymin=0.35) -> p_simula_impala
p_simula_impala
# Figs for the paper
# 2024-08-08
library(patchwork)
p_simula_duiker / p_simula_impala +
plot_annotation(tag_levels = c('a'), tag_prefix = '(',
tag_suffix = ')')
tiff(paste("figs/simula_plot.tiff",sep = ""),
height = 14, width = 14, units = "cm", res = 300, compression = "lzw",
pointsize = 8)
p_simula_duiker / p_simula_impala +
plot_annotation(tag_levels = c('a'), tag_prefix = '(',
tag_suffix = ')')
dev.off()
params$species_name
####---- Load packages ----
library(tidyverse)
library(readxl)
library(mvtnorm)
# if(!"devtools" %in% rownames(installed.packages()))
#   {install.packages("devtools")}
# devtools::install_github('david-borchers/LT2D')
library(LT2D)
# if(!"devtools" %in% rownames(installed.packages()))
#   {install.packages("devtools")}
# devtools::install_github('david-borchers/LT2D')
library(LT2D)
library(Distance)
library(Distance)
library(hrbrthemes)
library(hrbrthemes)
library(ggpubr)
library(png)
library(grid)
library(ggh4x)
## ---- save abundance map for GIS ----
read.csv("output/DSMresults_", params$species_name,
".csv", sep = ""))
## ---- save abundance map for GIS ----
read.csv(paste("output/DSMresults_", params$species_name,
".csv", sep = ""))
logo_path <- paste("logos/", params$species_name, "_logo.png",sep = "")
logo <- readPNG(logo_path)
if(params$species_name == "duiker") size_logo=2 else size_logo=2.5
if(params$species_name == "duiker") tile_factor=1 else tile_factor=2
pNhat <- ggplot(pp) +
geom_tile(aes(x=x, y=y, fill=Nhat/(preddata$area[1]/1000000),
width=(1/params$conversion_km_m)*tile_factor,
height=(1/params$conversion_km_m)*tile_factor)) +
scale_fill_distiller(palette = "YlGn", direction=2) +
# scale_fill_distiller(palette = "YlGn", direction=2,
#                      values = c(seq(0, 60, 60))) +
# scale_fill_distiller(palette = "YlGn", direction=2, trans = "log10",
#                      name = "log10(Similarity)") +
labs(fill=bquote(widehat(N)), x = "Longitude", y = "Latitude") +
ylim(c(-1570000,-1530000)) +
xlim(c(3450000,3540000)) +
theme_classic(base_size = 10) +
coord_equal() +
guides(x = "axis_truncated", y = "axis_truncated") +
annotation_custom(rasterGrob(logo,
width = unit(size_logo, "cm"),
height = unit(size_logo, "cm")),
xmin=3500000, ymin=-1570000)
####---- Load packages ----
library(tidyverse)
library(readxl)
library(mvtnorm)
# if(!"devtools" %in% rownames(installed.packages()))
#   {install.packages("devtools")}
# devtools::install_github('david-borchers/LT2D')
library(LT2D)
library(Distance)
library(hrbrthemes)
library(ggpubr)
library(Rmisc)
library(png)
library(grid)
library(ggh4x)
## ---- save abundance map for GIS ----
read.csv(paste("output/DSMresults_", params$species_name,
".csv", sep = ""))
## ---- save abundance map for GIS ----
read.csv(paste("output/DSMresults_", params$species_name,
".csv", sep = "")) -> pp
logo_path <- paste("logos/", params$species_name, "_logo.png",sep = "")
logo <- readPNG(logo_path)
if(params$species_name == "duiker") size_logo=2 else size_logo=2.5
if(params$species_name == "duiker") tile_factor=1 else tile_factor=2
pNhat <- ggplot(pp) +
geom_tile(aes(x=x, y=y, fill=Nhat/(preddata$area[1]/1000000),
width=(1/params$conversion_km_m)*tile_factor,
height=(1/params$conversion_km_m)*tile_factor)) +
scale_fill_distiller(palette = "YlGn", direction=2) +
# scale_fill_distiller(palette = "YlGn", direction=2,
#                      values = c(seq(0, 60, 60))) +
# scale_fill_distiller(palette = "YlGn", direction=2, trans = "log10",
#                      name = "log10(Similarity)") +
labs(fill=bquote(widehat(N)), x = "Longitude", y = "Latitude") +
ylim(c(-1570000,-1530000)) +
xlim(c(3450000,3540000)) +
theme_classic(base_size = 10) +
coord_equal() +
guides(x = "axis_truncated", y = "axis_truncated") +
annotation_custom(rasterGrob(logo,
width = unit(size_logo, "cm"),
height = unit(size_logo, "cm")),
xmin=3500000, ymin=-1570000)
print(pNhat)
#### Load dataset
preddata <- read_excel(paste("data/", params$preddata_file, sep = ""),
col_types = rep("numeric", 4))
preddata$area <- preddata$area
logo_path <- paste("logos/", params$species_name, "_logo.png",sep = "")
logo <- readPNG(logo_path)
if(params$species_name == "duiker") size_logo=2 else size_logo=2.5
if(params$species_name == "duiker") tile_factor=1 else tile_factor=2
pNhat <- ggplot(pp) +
geom_tile(aes(x=x, y=y, fill=Nhat/(preddata$area[1]/1000000),
width=(1/params$conversion_km_m)*tile_factor,
height=(1/params$conversion_km_m)*tile_factor)) +
scale_fill_distiller(palette = "YlGn", direction=2) +
# scale_fill_distiller(palette = "YlGn", direction=2,
#                      values = c(seq(0, 60, 60))) +
# scale_fill_distiller(palette = "YlGn", direction=2, trans = "log10",
#                      name = "log10(Similarity)") +
labs(fill=bquote(widehat(N)), x = "Longitude", y = "Latitude") +
ylim(c(-1570000,-1530000)) +
xlim(c(3450000,3540000)) +
theme_classic(base_size = 10) +
coord_equal() +
guides(x = "axis_truncated", y = "axis_truncated") +
annotation_custom(rasterGrob(logo,
width = unit(size_logo, "cm"),
height = unit(size_logo, "cm")),
xmin=3500000, ymin=-1570000)
print(pNhat)
if(params$species_name == "duiker") pNhat_duiker <- pNhat else pNhat_impala <- pNhat
params$species_name
## ---- load data for maps ----
read.csv(paste("output/DSMresults_", params$species_name,
".csv", sep = "")) -> pp
#### Load dataset
preddata <- read_excel(paste("data/", params$preddata_file, sep = ""),
col_types = rep("numeric", 4))
preddata$area <- preddata$area
logo_path <- paste("logos/", params$species_name, "_logo.png",sep = "")
logo <- readPNG(logo_path)
if(params$species_name == "duiker") size_logo=2 else size_logo=2.5
if(params$species_name == "duiker") tile_factor=1 else tile_factor=2
pNhat <- ggplot(pp) +
geom_tile(aes(x=x, y=y, fill=Nhat/(preddata$area[1]/1000000),
width=(1/params$conversion_km_m)*tile_factor,
height=(1/params$conversion_km_m)*tile_factor)) +
scale_fill_distiller(palette = "YlGn", direction=2) +
# scale_fill_distiller(palette = "YlGn", direction=2,
#                      values = c(seq(0, 60, 60))) +
# scale_fill_distiller(palette = "YlGn", direction=2, trans = "log10",
#                      name = "log10(Similarity)") +
if(params$species_name == "duiker") {
labs(fill=bquote(widehat(N)), x = "", y = "Latitude")
} else {
labs(fill=bquote(widehat(N)), x = "Longitude", y = "Latitude")
}
pNhat <- ggplot(pp) +
geom_tile(aes(x=x, y=y, fill=Nhat/(preddata$area[1]/1000000),
width=(1/params$conversion_km_m)*tile_factor,
height=(1/params$conversion_km_m)*tile_factor)) +
scale_fill_distiller(palette = "YlGn", direction=2) +
# scale_fill_distiller(palette = "YlGn", direction=2,
#                      values = c(seq(0, 60, 60))) +
# scale_fill_distiller(palette = "YlGn", direction=2, trans = "log10",
#                      name = "log10(Similarity)") +
if(params$species_name == "duiker") {
labs(fill=bquote(widehat(N)), x = "", y = "Latitude")
} else {
labs(fill=bquote(widehat(N)), x = "Longitude", y = "Latitude")
} +
ylim(c(-1570000,-1530000)) +
xlim(c(3450000,3540000)) +
theme_classic(base_size = 10) +
coord_equal() +
guides(x = "axis_truncated", y = "axis_truncated") +
annotation_custom(rasterGrob(logo,
width = unit(size_logo, "cm"),
height = unit(size_logo, "cm")),
xmin=3500000, ymin=-1570000)
print(pNhat)
pNhat_impala
####---- Load packages ----
library(tidyverse)
library(readxl)
library(mvtnorm)
# if(!"devtools" %in% rownames(installed.packages()))
#   {install.packages("devtools")}
# devtools::install_github('david-borchers/LT2D')
library(LT2D)
library(Distance)
library(hrbrthemes)
library(ggpubr)
library(Rmisc)
library(png)
library(grid)
library(ggh4x)
## ---- load data for maps ----
read.csv(paste("output/DSMresults_", params$species_name,
".csv", sep = "")) -> pp
#### Load dataset
preddata <- read_excel(paste("data/", params$preddata_file, sep = ""),
col_types = rep("numeric", 4))
preddata$area <- preddata$area
logo_path <- paste("logos/", params$species_name, "_logo.png",sep = "")
logo <- readPNG(logo_path)
if(params$species_name == "duiker") size_logo=2 else size_logo=2.5
if(params$species_name == "duiker") tile_factor=1 else tile_factor=2
pNhat <- ggplot(pp) +
geom_tile(aes(x=x, y=y, fill=Nhat/(preddata$area[1]/1000000),
width=(1/params$conversion_km_m)*tile_factor,
height=(1/params$conversion_km_m)*tile_factor)) +
scale_fill_distiller(palette = "YlGn", direction=2) +
# scale_fill_distiller(palette = "YlGn", direction=2,
#                      values = c(seq(0, 60, 60))) +
# scale_fill_distiller(palette = "YlGn", direction=2, trans = "log10",
#                      name = "log10(Similarity)") +
if(params$species_name == "duiker") {
labs(fill=bquote(widehat(N)), x = "", y = "Latitude")
} else {
labs(fill=bquote(widehat(N)), x = "Longitude", y = "Latitude")
} +
ylim(c(-1570000,-1530000)) +
xlim(c(3450000,3540000)) +
theme_classic(base_size = 10) +
coord_equal() +
guides(x = "axis_truncated", y = "axis_truncated") +
annotation_custom(rasterGrob(logo,
width = unit(size_logo, "cm"),
height = unit(size_logo, "cm")),
xmin=3500000, ymin=-1570000)
print(pNhat)
if(params$species_name == "duiker") pNhat_duiker <- pNhat else pNhat_impala <- pNhat
print(pNhat)
pNhat <- ggplot(pp) +
geom_tile(aes(x=x, y=y, fill=Nhat/(preddata$area[1]/1000000),
width=(1/params$conversion_km_m)*tile_factor,
height=(1/params$conversion_km_m)*tile_factor)) +
scale_fill_distiller(palette = "YlGn", direction=2) +
# scale_fill_distiller(palette = "YlGn", direction=2,
#                      values = c(seq(0, 60, 60))) +
# scale_fill_distiller(palette = "YlGn", direction=2, trans = "log10",
#                      name = "log10(Similarity)") +
ylim(c(-1570000,-1530000)) +
xlim(c(3450000,3540000)) +
theme_classic(base_size = 10) +
coord_equal() +
guides(x = "axis_truncated", y = "axis_truncated") +
annotation_custom(rasterGrob(logo,
width = unit(size_logo, "cm"),
height = unit(size_logo, "cm")),
xmin=3500000, ymin=-1570000) +
if(params$species_name == "duiker") {
labs(fill=bquote(widehat(N)), x = "", y = "Latitude")
} else {
labs(fill=bquote(widehat(N)), x = "Longitude", y = "Latitude")
}
print(pNhat)
pNhat_duiker
pNhat
params$species_name
if(params$species_name == "duiker") pNhat_duiker <- pNhat else pNhat_impala <- pNhat
pNhat_duiker
print(pNhat_duiker)
####---- Load packages ----
library(tidyverse)
library(readxl)
library(mvtnorm)
# if(!"devtools" %in% rownames(installed.packages()))
#   {install.packages("devtools")}
# devtools::install_github('david-borchers/LT2D')
library(LT2D)
library(Distance)
library(hrbrthemes)
library(ggpubr)
library(Rmisc)
library(png)
library(grid)
library(ggh4x)
## ---- load data for maps ----
read.csv(paste("output/DSMresults_", params$species_name,
".csv", sep = "")) -> pp
#### Load dataset
preddata <- read_excel(paste("data/", params$preddata_file, sep = ""),
col_types = rep("numeric", 4))
preddata$area <- preddata$area
logo_path <- paste("logos/", params$species_name, "_logo.png",sep = "")
logo <- readPNG(logo_path)
if(params$species_name == "duiker") size_logo=2 else size_logo=2.5
if(params$species_name == "duiker") tile_factor=1 else tile_factor=2
pNhat <- ggplot(pp) +
geom_tile(aes(x=x, y=y, fill=Nhat/(preddata$area[1]/1000000),
width=(1/params$conversion_km_m)*tile_factor,
height=(1/params$conversion_km_m)*tile_factor)) +
scale_fill_distiller(palette = "YlGn", direction=2) +
# scale_fill_distiller(palette = "YlGn", direction=2,
#                      values = c(seq(0, 60, 60))) +
# scale_fill_distiller(palette = "YlGn", direction=2, trans = "log10",
#                      name = "log10(Similarity)") +
ylim(c(-1570000,-1530000)) +
xlim(c(3450000,3540000)) +
theme_classic(base_size = 10) +
coord_equal() +
guides(x = "axis_truncated", y = "axis_truncated") +
annotation_custom(rasterGrob(logo,
width = unit(size_logo, "cm"),
height = unit(size_logo, "cm")),
xmin=3500000, ymin=-1570000) +
if(params$species_name == "duiker") {
labs(fill=bquote(widehat(N)), x = "", y = "Latitude")
} else {
labs(fill=bquote(widehat(N)), x = "Longitude", y = "Latitude")
}
print(pNhat)
if(params$species_name == "duiker") pNhat_duiker <- pNhat else pNhat_impala <- pNhat
print(pNhat)
pNhat_impala
pNhat_duiker / pNhat_impala +
plot_annotation(tag_levels = c('a'), tag_prefix = '(',
tag_suffix = ')')
tiff(paste("figs/dsm_plot.tiff",sep = ""),
height = 14, width = 14, units = "cm", res = 300, compression = "lzw",
pointsize = 8)
pNhat_duiker / pNhat_impala +
plot_annotation(tag_levels = c('a'), tag_prefix = '(',
tag_suffix = ')')
dev.off()
