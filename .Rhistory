source("functions/GoFy_vlm.R") # custom GoFy function, modified by VLM 2022-11-11
#### Load dataset
data <- read_excel("data/duiker.xlsx", #sheet="template_dataset",
col_types = c(rep("numeric", 8)))#,
# "date",
# "text", "text"))
# data$transect_length <- data$transect_length*1000
# data$area <- data$area*1000000
head(data)
#### Dealing with NA and non-detections
data_clean <-
data %>%
filter(detected != 0, # we only include actual observations in the dataset used to fit the detection function
perp_dist != "NA", # we remove lines with NA distances
forw_dist != "NA")
#### Load packages
library(tidyverse)
library(readxl)
library(mvtnorm)
# if(!"devtools" %in% rownames(installed.packages()))
#   {install.packages("devtools")}
# devtools::install_github('david-borchers/LT2D')
library(LT2D)
#### Load 2D distance functions
source("functions/com_hfunctions.R")
source("functions/com_pifunctions.R")
source("functions/com_likelihoodutilities.R")
source("functions/GoFy_vlm.R") # custom GoFy function, modified by VLM 2022-11-11
#### Load dataset
data <- read_excel("data/duiker.xlsx", #sheet="template_dataset",
col_types = c(rep("numeric", 8)))#,
# "date",
# "text", "text"))
# data$transect_length <- data$transect_length*1000
# data$area <- data$area*1000000
head(data)
#### Dealing with NA and non-detections
data_clean <-
data %>%
filter(detected != 0, # we only include actual observations in the dataset used to fit the detection function
perp_dist != "NA", # we remove lines with NA distances
forw_dist != "NA")
data_clean$forw_dist <- abs(data_clean$forw_dist) # we make sure all distances are positive (see Discussion for details)
View(data_clean)
hist(data_clean$perp_dist, main = "", xlab = "Perpendicular distance (m)")
boxplot(data_clean$perp_dist, ylab = "Perpendicular distance (m)")
no_data <- round(params$trunc_perp_dist*length(data_clean$perp_dist)/100,0) # no. data to be deleted
threshold <- sort(data_clean$perp_dist, decreasing = TRUE)[no_data+1] # threshold
data_trunc <-
data_clean %>%
filter(perp_dist <= threshold)
save(data_trunc, file = "output/data_trunc.RData", compress = FALSE)
View(data)
#### Load packages
library(tidyverse)
library(readxl)
library(mvtnorm)
# if(!"devtools" %in% rownames(installed.packages()))
#   {install.packages("devtools")}
# devtools::install_github('david-borchers/LT2D')
library(LT2D)
#### Load 2D distance functions
source("functions/com_hfunctions.R")
source("functions/com_pifunctions.R")
source("functions/com_likelihoodutilities.R")
source("functions/GoFy_vlm.R") # custom GoFy function, modified by VLM 2022-11-11
#### Load dataset
data <- read_excel("data/duiker.xlsx", #sheet="template_dataset",
col_types = c(rep("numeric", 8)))#,
# "date",
# "text", "text"))
# data$transect_length <- data$transect_length*1000
# data$area <- data$area*1000000
head(data)
#### Dealing with NA and non-detections
data_clean <-
data %>%
filter(detected != 0, # we only include actual observations in the dataset used to fit the detection function
perp_dist != "NA", # we remove lines with NA distances
forw_dist != "NA")
data_clean$forw_dist <- abs(data_clean$forw_dist) # we make sure all distances are positive (see Discussion for details)
View(data)
View(data_clean)
hist(data_clean$perp_dist, main = "", xlab = "Perpendicular distance (m)")
boxplot(data_clean$perp_dist, ylab = "Perpendicular distance (m)")
no_data <- round(params$trunc_perp_dist*length(data_clean$perp_dist)/100,0) # no. data to be deleted
threshold <- sort(data_clean$perp_dist, decreasing = TRUE)[no_data+1] # threshold
data_trunc <-
data_clean %>%
filter(perp_dist <= threshold)
save(data_trunc, file = "output/data_trunc.RData", compress = FALSE)
no_data
params$trunc_perp_dist
trunc_perp_dist
params$trunc_perp_dist
hist(data_clean$perp_dist, main = "", xlab = "Perpendicular distance (m)")
boxplot(data_clean$perp_dist, ylab = "Perpendicular distance (m)")
no_data <- round(params$trunc_perp_dist*length(data_clean$perp_dist)/100,0) # no. data to be deleted
threshold <- sort(data_clean$perp_dist, decreasing = TRUE)[no_data+1] # threshold
data_trunc <-
data_clean %>%
filter(perp_dist <= threshold)
save(data_trunc, file = "output/data_trunc.RData", compress = FALSE)
hist(data_trunc$forw_dist, main = "", xlab = "Forward distance (m)")
boxplot(data_trunc$forw_dist, ylab = "Forward distance (m)")
ystart = params$trunc_forw_dist_m
data_trunc <-
data_trunc %>%
filter(forw_dist <= ystart)
max(data_trunc$forw_dist)
seed_no <- set.seed(params$seed_no)
#### Model fitting
y = data_trunc$forw_dist
x = data_trunc$perp_dist
hr = h.RE # h.yTRE not compatible with pi.sigmoI
# these functions work: h.RE, h.IP, h.SS, h.okamura
pi.x = pi.sigmo
# functions tested and working with h.RE: pi.sigmo, pi.CHN, pi.TN
ystart = ceiling(max(y))
w = ceiling(max(x))
length.b = 2
debug=FALSE
FIT=list(); dev=NULL
for (m in 1:10) {
set.seed(params$seed_no)
pars = rnorm(4, c(0.25,0.25,-4,-1), 3)
set.seed(params$seed_no)
tmp0 <- tryCatch.W.E (
fityx(y,x,pars[1:length.b],
hr,ystart,pi.x,pars[(length.b+1):length(pars)],w,control=list(),
hessian=TRUE,corrFlag=0.7,debug=FALSE)
)
fit = NA
if(! "error" %in% class(tmp0$value)) {
fit <- tmp0$value
fit$vcov <-  matrix(Matrix::nearPD(fit$vcov)$mat,4,4)
}
FIT[[m]] = fit
if(is.na(fit[1])) dev=c(dev, 1e12) else dev = c(dev, fit$val)
}
fitVU = FIT[[which.min(dev)]]
tabVU = matrix(NA,2,3)
if(is.na(fitVU[1])) tabVU = matrix(NA,2,3) else {
# set.seed(10)
tmp1 <- tryCatch.W.E (boot(fitVU))
if(! "error" %in% class(tmp1$value))  tabVU=tmp1$value
}
tabVU
if(!is.numeric(unlist(tabVU))) print("error, change seed_no to any random number")
save(fitVU, file = "output/fitVU.RData", compress = FALSE)
tryCatch.W.E(plotfit.x(x[x<=w],fitVU,nclass=20,nint=100));rug(x[x<=w])
# vedere https://github.com/david-borchers/LT2D/blob/master/inst/FitsForPaper.r
# linea nera sigmoide = distribuzione reale animali
# linea grigia = detection osservata
# linea tratteggiata = detection corretta tenendo conto della risposta comportamentale
fName = "h1"
GoFx(fitVU,plot=TRUE)$pvals
plotfit.y(y[x<=w & y<=ystart],x,fitVU,nclass=20);rug(x=y[x<=w])
plotfit.smoothfy(fitVU,nclass=32);rug(x=y[x<=w])
GoFy_vlm(fitVU,plot=TRUE)$pvals
plotfit.smoothfy(fitVU,xmax=199)
#EHSW:
# phatInterval(fitVU) %>%
#   dplyr::select(-interval)
LT2D::phatModels(modList = FIT[1], n=length(data$cluster_size))
length(data$cluster_size)/(phatInterval(fitVU))[1] -> no_groups
names(no_groups) <- "no_groups"
(no_groups/(2*w*sum(data$transect_length)))*1000000 -> dens_groups_km2
names(dens_groups_km2) <- "dens_groups_km2"
cbind(no_groups, dens_groups_km2)
# dividendo per 1000 la distanza di troncatura, si riporta l'unità di misura per la densità in km2
# as.data.frame(phatInterval(fitVU)*w) %>%
#   dplyr::select(-interval) %>%
#   dplyr::rename(Nhat = phat,
#                 CV.Nhat = CV.phat)# riassegnare i nomi alla tabella, eliminando interval restano: Nhat dei gruppi nella regione indagata (w), CV del numero di gruppi e limiti dell'intervallo
# p(0):
# p0.n=tryCatch.W.E(1-Sy(0,0,ystart,fitVU$b,h1));p0.n
dens_groups_km2
data$transect_length
(2*w*sum(data$transect_length))
View(data)
#### Load packages
library(tidyverse)
library(readxl)
library(mvtnorm)
# if(!"devtools" %in% rownames(installed.packages()))
#   {install.packages("devtools")}
# devtools::install_github('david-borchers/LT2D')
library(LT2D)
#### Load 2D distance functions
source("functions/com_hfunctions.R")
source("functions/com_pifunctions.R")
source("functions/com_likelihoodutilities.R")
source("functions/GoFy_vlm.R") # custom GoFy function, modified by VLM 2022-11-11
#### Load dataset
data <- read_excel("data/duiker.xlsx", #sheet="template_dataset",
col_types = c(rep("numeric", 8)))#,
# "date",
# "text", "text"))
# data$transect_length <- data$transect_length*1000
# data$area <- data$area*1000000
head(data)
#### Dealing with NA and non-detections
data_clean <-
data %>%
filter(detected != 0, # we only include actual observations in the dataset used to fit the detection function
perp_dist != "NA", # we remove lines with NA distances
forw_dist != "NA")
data_clean$forw_dist <- abs(data_clean$forw_dist) # we make sure all distances are positive (see Discussion for details)
hist(data_clean$perp_dist, main = "", xlab = "Perpendicular distance (m)")
boxplot(data_clean$perp_dist, ylab = "Perpendicular distance (m)")
no_data <- round(params$trunc_perp_dist*length(data_clean$perp_dist)/100,0) # no. data to be deleted
threshold <- sort(data_clean$perp_dist, decreasing = TRUE)[no_data+1] # threshold
data_trunc <-
data_clean %>%
filter(perp_dist <= threshold)
save(data_trunc, file = "output/data_trunc.RData", compress = FALSE)
hist(data_trunc$forw_dist, main = "", xlab = "Forward distance (m)")
boxplot(data_trunc$forw_dist, ylab = "Forward distance (m)")
ystart = max(data_trunc$forw_dist) # change this to the desired truncation distance if necessary, e.g.
# ystart = 65
data_trunc <-
data_trunc %>%
filter(forw_dist <= ystart)
seed_no <- set.seed(params$seed_no)
#### Model fitting
y = data_trunc$forw_dist
x = data_trunc$perp_dist
hr = h.RE # h.yTRE not compatible with pi.sigmoI
# these functions work: h.RE, h.IP, h.SS, h.okamura
pi.x = pi.sigmo
# functions tested and working with h.RE: pi.sigmo, pi.CHN, pi.TN
ystart = ceiling(max(y))
w = ceiling(max(x))
length.b = 2
debug=FALSE
FIT=list(); dev=NULL
for (m in 1:10) {
set.seed(params$seed_no)
pars = rnorm(4, c(0.25,0.25,-4,-1), 3)
set.seed(params$seed_no)
tmp0 <- tryCatch.W.E (
fityx(y,x,pars[1:length.b],
hr,ystart,pi.x,pars[(length.b+1):length(pars)],w,control=list(),
hessian=TRUE,corrFlag=0.7,debug=FALSE)
)
fit = NA
if(! "error" %in% class(tmp0$value)) {
fit <- tmp0$value
fit$vcov <-  matrix(Matrix::nearPD(fit$vcov)$mat,4,4)
}
FIT[[m]] = fit
if(is.na(fit[1])) dev=c(dev, 1e12) else dev = c(dev, fit$val)
}
fitVU = FIT[[which.min(dev)]]
tabVU = matrix(NA,2,3)
if(is.na(fitVU[1])) tabVU = matrix(NA,2,3) else {
# set.seed(10)
tmp1 <- tryCatch.W.E (boot(fitVU))
if(! "error" %in% class(tmp1$value))  tabVU=tmp1$value
}
tabVU
if(!is.numeric(unlist(tabVU))) print("error, change seed_no to any random number")
save(fitVU, file = "output/fitVU.RData", compress = FALSE)
tryCatch.W.E(plotfit.x(x[x<=w],fitVU,nclass=20,nint=100));rug(x[x<=w])
# vedere https://github.com/david-borchers/LT2D/blob/master/inst/FitsForPaper.r
# linea nera sigmoide = distribuzione reale animali
# linea grigia = detection osservata
# linea tratteggiata = detection corretta tenendo conto della risposta comportamentale
fName = "h1"
GoFx(fitVU,plot=TRUE)$pvals
plotfit.y(y[x<=w & y<=ystart],x,fitVU,nclass=20);rug(x=y[x<=w])
plotfit.smoothfy(fitVU,nclass=32);rug(x=y[x<=w])
GoFy_vlm(fitVU,plot=TRUE)$pvals
plotfit.smoothfy(fitVU,xmax=199)
#EHSW:
# phatInterval(fitVU) %>%
#   dplyr::select(-interval)
LT2D::phatModels(modList = FIT[1], n=length(data$cluster_size))
length(data$cluster_size)/(phatInterval(fitVU))[1] -> no_groups
names(no_groups) <- "no_groups"
(no_groups/(2*w*sum(data$transect_length)))*1000000 -> dens_groups_km2
names(dens_groups_km2) <- "dens_groups_km2"
cbind(no_groups, dens_groups_km2)
# dividendo per 1000 la distanza di troncatura, si riporta l'unità di misura per la densità in km2
# as.data.frame(phatInterval(fitVU)*w) %>%
#   dplyr::select(-interval) %>%
#   dplyr::rename(Nhat = phat,
#                 CV.Nhat = CV.phat)# riassegnare i nomi alla tabella, eliminando interval restano: Nhat dei gruppi nella regione indagata (w), CV del numero di gruppi e limiti dell'intervallo
# p(0):
# p0.n=tryCatch.W.E(1-Sy(0,0,ystart,fitVU$b,h1));p0.n
no_groups
sum(data$transect_length)
(no_groups/(2*(w/1000)*sum(data$transect_length)))
(no_groups/(2*(w/1000)*sum(data$transect_length)))*1000000 -> dens_groups_km2
length(data$cluster_size)/(phatInterval(fitVU))[1] -> no_groups
names(no_groups) <- "no_groups"
(no_groups/(2*(w/1000)*sum(data$transect_length)))*1000000 -> dens_groups_km2
names(dens_groups_km2) <- "dens_groups_km2"
cbind(no_groups, dens_groups_km2)
# dividendo per 1000 la distanza di troncatura, si riporta l'unità di misura per la densità in km2
# as.data.frame(phatInterval(fitVU)*w) %>%
#   dplyr::select(-interval) %>%
#   dplyr::rename(Nhat = phat,
#                 CV.Nhat = CV.phat)# riassegnare i nomi alla tabella, eliminando interval restano: Nhat dei gruppi nella regione indagata (w), CV del numero di gruppi e limiti dell'intervallo
# p(0):
# p0.n=tryCatch.W.E(1-Sy(0,0,ystart,fitVU$b,h1));p0.n
(no_groups/(2*(w/1000)*sum(data$transect_length))) -> dens_groups_km2
names(dens_groups_km2) <- "dens_groups_km2"
cbind(no_groups, dens_groups_km2)
data_clustersize <-
data %>%
filter(detected != 0,
perp_dist != "NA",
forw_dist != "NA",
perp_dist <= w,
forw_dist <= ystart)
data_clustersize$forw_dist <- abs(data_clustersize$forw_dist)
# mean(data_clustersize$cluster_size)
summary(data_clustersize$cluster_size)
print("Cluster size standard deviation:")
sd(data_clustersize$cluster_size)
no_groups*mean(data_clustersize$cluster_size) -> abund_survey_individuals
cv2_detfunc <- (phatInterval(fitVU)[2])^2
cv2_clustersize <- (sd(data_clustersize$cluster_size)/mean(data_clustersize$cluster_size))^2
data %>%
mutate(transetto = factor(transect)) %>%
dplyr::group_by(transect) %>%
dplyr::summarise(no_groups_transect = sum(detected),
transect_length = mean(transect_length)) %>%
mutate(encounter_rate = no_groups_transect/transect_length) -> res
res
res$no_groups_transect
cv2_transetti <- (sd(res$encounter_rate)/mean(res$encounter_rate))^2
(cv_tot <- sqrt(cv2_detfunc + cv2_clustersize + cv2_transetti))
abund_survey_individuals
cv2_detfunc
cv2_clustersize
data %>%
mutate(transetto = factor(transect)) %>%
dplyr::group_by(transect) %>%
dplyr::summarise(no_groups_transect = sum(detected),
transect_length = mean(transect_length)) %>%
mutate(encounter_rate = no_groups_transect/transect_length) -> res
res
# res
res$no_groups_transect
cv2_transetti
(cv_tot <- sqrt(cv2_detfunc + cv2_clustersize + cv2_transetti))
max(data_trunc$perp_dist)
#### Load packages
library(tidyverse)
library(readxl)
library(mvtnorm)
# if(!"devtools" %in% rownames(installed.packages()))
#   {install.packages("devtools")}
# devtools::install_github('david-borchers/LT2D')
library(LT2D)
#### Load 2D distance functions
source("functions/com_hfunctions.R")
source("functions/com_pifunctions.R")
source("functions/com_likelihoodutilities.R")
source("functions/GoFy_vlm.R") # custom GoFy function, modified by VLM 2022-11-11
#### Load dataset
data <- read_excel("data/impala_vlm.xlsx", sheet="template_dataset",
col_types = c(rep("numeric", 8),
"date",
"text", "text"))
# data$transect_length <- data$transect_length*1000
# data$area <- data$area*1000000
head(data)
#### Dealing with NA and non-detections
data_clean <-
data %>%
filter(detected != 0, # we only include actual observations in the dataset used to fit the detection function
perp_dist != "NA", # we remove lines with NA distances
forw_dist != "NA")
data_clean$forw_dist <- abs(data_clean$forw_dist) # we make sure all distances are positive (see Discussion for details)
hist(data_clean$perp_dist, main = "", xlab = "Perpendicular distance (m)")
boxplot(data_clean$perp_dist, ylab = "Perpendicular distance (m)")
no_data <- round(params$trunc_perp_dist*length(data_clean$perp_dist)/100,0) # no. data to be deleted
threshold <- sort(data_clean$perp_dist, decreasing = TRUE)[no_data+1] # threshold
data_trunc <-
data_clean %>%
filter(perp_dist <= threshold)
save(data_trunc, file = "output/data_trunc.RData", compress = FALSE)
hist(data_trunc$forw_dist, main = "", xlab = "Forward distance (m)")
boxplot(data_trunc$forw_dist, ylab = "Forward distance (m)")
# ystart = max(data_trunc$forw_dist) # change this to the desired truncation distance if necessary, e.g.
ystart = 150
data_trunc <-
data_trunc %>%
filter(forw_dist <= ystart)
seed_no <- set.seed(params$seed_no)
#### Model fitting
y = data_trunc$forw_dist
x = data_trunc$perp_dist
hr = h.RE # h.yTRE not compatible with pi.sigmoI
# these functions work: h.RE, h.IP, h.SS, h.okamura
pi.x = pi.sigmo
# functions tested and working with h.RE: pi.sigmo, pi.CHN, pi.TN
ystart = ceiling(max(y))
w = ceiling(max(x))
length.b = 2
debug=FALSE
FIT=list(); dev=NULL
for (m in 1:10) {
set.seed(params$seed_no)
pars = rnorm(4, c(0.25,0.25,-4,-1), 3)
set.seed(params$seed_no)
tmp0 <- tryCatch.W.E (
fityx(y,x,pars[1:length.b],
hr,ystart,pi.x,pars[(length.b+1):length(pars)],w,control=list(),
hessian=TRUE,corrFlag=0.7,debug=FALSE)
)
fit = NA
if(! "error" %in% class(tmp0$value)) {
fit <- tmp0$value
fit$vcov <-  matrix(Matrix::nearPD(fit$vcov)$mat,4,4)
}
FIT[[m]] = fit
if(is.na(fit[1])) dev=c(dev, 1e12) else dev = c(dev, fit$val)
}
fitVU = FIT[[which.min(dev)]]
tabVU = matrix(NA,2,3)
if(is.na(fitVU[1])) tabVU = matrix(NA,2,3) else {
# set.seed(10)
tmp1 <- tryCatch.W.E (boot(fitVU))
if(! "error" %in% class(tmp1$value))  tabVU=tmp1$value
}
tabVU
if(!is.numeric(unlist(tabVU))) print("error, change seed_no to any random number")
save(fitVU, file = "output/fitVU.RData", compress = FALSE)
tryCatch.W.E(plotfit.x(x[x<=w],fitVU,nclass=20,nint=100));rug(x[x<=w])
# vedere https://github.com/david-borchers/LT2D/blob/master/inst/FitsForPaper.r
# linea nera sigmoide = distribuzione reale animali
# linea grigia = detection osservata
# linea tratteggiata = detection corretta tenendo conto della risposta comportamentale
fName = "h1"
GoFx(fitVU,plot=TRUE)$pvals
plotfit.y(y[x<=w & y<=ystart],x,fitVU,nclass=20);rug(x=y[x<=w])
plotfit.smoothfy(fitVU,nclass=32);rug(x=y[x<=w])
GoFy_vlm(fitVU,plot=TRUE)$pvals # brillantemente risolto
plotfit.smoothfy(fitVU,xmax=199)
#EHSW:
# phatInterval(fitVU) %>%
#   dplyr::select(-interval)
LT2D::phatModels(modList = FIT[1], n=length(data$cluster_size))
length(data$cluster_size)/(phatInterval(fitVU))[1] -> no_groups
names(no_groups) <- "no_groups"
(no_groups/(2*(w/1000)*sum(data$transect_length))) -> dens_groups_km2
names(dens_groups_km2) <- "dens_groups_km2"
cbind(no_groups, dens_groups_km2)
# dividendo per 1000 la distanza di troncatura, si riporta l'unità di misura per la densità in km2
# as.data.frame(phatInterval(fitVU)*w) %>%
#   dplyr::select(-interval) %>%
#   dplyr::rename(Nhat = phat,
#                 CV.Nhat = CV.phat)# riassegnare i nomi alla tabella, eliminando interval restano: Nhat dei gruppi nella regione indagata (w), CV del numero di gruppi e limiti dell'intervallo
# p(0):
# p0.n=tryCatch.W.E(1-Sy(0,0,ystart,fitVU$b,h1));p0.n
data_clustersize <-
data %>%
filter(detected != 0,
perp_dist != "NA",
forw_dist != "NA",
perp_dist <= w,
forw_dist <= ystart)
data_clustersize$forw_dist <- abs(data_clustersize$forw_dist)
# mean(data_clustersize$cluster_size)
summary(data_clustersize$cluster_size)
print("Cluster size standard deviation:")
sd(data_clustersize$cluster_size)
no_groups*mean(data_clustersize$cluster_size) -> abund_survey_individuals
cv2_detfunc <- (phatInterval(fitVU)[2])^2
cv2_clustersize <- (sd(data_clustersize$cluster_size)/mean(data_clustersize$cluster_size))^2
data %>%
mutate(transetto = factor(transect)) %>%
dplyr::group_by(transect) %>%
dplyr::summarise(no_groups_transect = sum(detected),
transect_length = mean(transect_length)) %>%
mutate(encounter_rate = no_groups_transect/transect_length) -> res
res
res$no_groups_transect
cv2_transetti <- (sd(res$encounter_rate)/mean(res$encounter_rate))^2
(cv_tot <- sqrt(cv2_detfunc + cv2_clustersize + cv2_transetti))
data_transects <- read_excel("data/impala_vlm.xlsx",
sheet="template_dataset",
col_types = c(rep("numeric", 3),
"date",
"text", "text",
rep("numeric", 5)))
data_transects %>%
distinct(transect, transect_length) -> data_transects_unique
### Population density
transect.lengths = data_transects_unique$transect_length
sum(transect.lengths)*2*w/1000 # area indagata
phatInterval(fitVU)*w -> abund_survey # num gruppi, i nomi delle colonne sono da modificare
abund_survey[1]/sum(transect.lengths)/(fitVU$w/1000) -> dens_gruppi_km2
names(dens_gruppi_km2) <- "no_gruppi_km2"
abund_survey_individuals[1]/sum(transect.lengths)/(fitVU$w/1000) -> dens_ind_km2 # individui
names(dens_ind_km2) <- "no_ind_km2"
# dividendo per 1000 la distanza di troncatura, si riporta l'unità di misura per la densità in km2
cbind(dens_gruppi_km2, dens_ind_km2)
paste("data/",params$input_file",sep="")
"text", "text")))
#### Load dataset
data <- read_excel(paste("data/",params$input_file,sep=""), #sheet="template_dataset",
col_types = c(rep("numeric", 8),
"date",
"text", "text"))
paste("data/",params$input_file,sep="")
knit_with_parameters("C:/Users/valen/git/2D_DistanceSampling/00_intro.Rmd")
